{"topic":{"title":"M6: Content Question (procedures )","time":null,"msg":"<p><span>Post questions about procedures.</span><span>&nbsp;Use the first line of your post as the subject of the post.</span></p>"},"replies":[{"id":"entry-2981551","entry":{"title":"dizzy cuckoo","time":"2021-07-20T03:07:50.000Z","msg":"<p>The PPT files prof used in the lectures are now available at:</p>\n<p><a href=\"https://deanza.instructure.com/courses/21014/files\" target=\"_blank\" data-api-endpoint=\"https://deanza.instructure.com/api/v1/courses/21014/folders/root\" data-api-returntype=\"Folder\">https://deanza.instructure.com/courses/21014/files</a>. The examples with comments are going to be helpful.&nbsp;</p>\n<p>&nbsp;</p>"},"replies":[{"id":"entry-2983571","entry":{"title":"consistent centipede","time":"2021-07-21T01:03:11.000Z","msg":"<p>Thank you, this was very helpful!</p>"},"replies":[]},{"id":"entry-2983714","entry":{"title":"professional pigeon","time":"2021-07-21T02:18:05.000Z","msg":"<p>appreciate it</p>"},"replies":[]},{"id":"entry-2991249","entry":{"title":"secure salamander","time":"2021-07-23T23:53:42.000Z","msg":"<p>Just got around to looking at the examples with comments. That's really going to be helpful. Thank you!</p>"},"replies":[]},{"id":"entry-2994958","entry":{"title":"statutory squirrel","time":"2021-07-25T19:40:33.000Z","msg":"<p>Thanks a bunch! This is helpful!&nbsp;</p>"},"replies":[]},{"id":"entry-2995024","entry":{"title":"impressive hummingbird","time":"2021-07-25T20:06:47.000Z","msg":"<p>Thanks for posting! Very helpful</p>"},"replies":[]},{"id":"entry-2995103","entry":{"title":"overseas orca","time":"2021-07-25T20:38:07.000Z","msg":"<p>Thanks very much!</p>"},"replies":[]},{"id":"entry-2995184","entry":{"title":"hilarious harrier","time":"2021-07-25T21:14:46.000Z","msg":"<p>Thanks</p>"},"replies":[]},{"id":"entry-2995213","entry":{"title":"easy dolphin","time":"2021-07-25T21:31:45.000Z","msg":"<p>Thank you very much!</p>"},"replies":[]},{"id":"entry-2996119","entry":{"title":"enormous earthworm","time":"2021-07-26T02:47:23.000Z","msg":"<p>Thanks</p>"},"replies":[]},{"id":"entry-2996648","entry":{"title":"breezy bird","time":"2021-07-26T04:33:18.000Z","msg":"Thanks the for the heads up, the comments were definitely helpful."},"replies":[]},{"id":"entry-2996818","entry":{"title":"civic bovid","time":"2021-07-26T05:05:32.000Z","msg":"<p>Thank you for sending the helpful file.</p>"},"replies":[]},{"id":"entry-2997241","entry":{"title":"thin tick","time":"2021-07-26T06:04:41.000Z","msg":"<p>Thanks yimin this was super helpful. I didn't know the powerpoints would be available.</p>"},"replies":[]},{"id":"entry-2997558","entry":{"title":"agricultural ant","time":"2021-07-26T06:40:03.000Z","msg":"<p>Comments were really helpful!</p>"},"replies":[]}]},{"id":"entry-2983916","entry":{"title":"loose llama","time":"2021-07-21T03:44:10.000Z","msg":"<p>Chapter 6 feels like learning the Irvine API</p>\n<p>&lt;rant&gt;<br>I know this is just opinion and ranting but I'd much prefer if Irvine32 had only a very small number of simple functions.&nbsp; Do we need color so much in a book on assembly?&nbsp; It feels like a whole book could be written about the Irvine API alone.&nbsp; I'd appreciate it more if we made our own API in assembler.&nbsp; I also think it would be useful to use Visual Studio to make simple callable C functions to do some I/O work then call them from our ASM code.&nbsp; It would be more representative of real work.&nbsp; I know the author spent a lot of time on the API.&nbsp; But I find myself constantly looking up and <em>learning</em> the author's API which I will probably never use again.<br>&lt;/rant&gt;</p>"},"replies":[{"id":"entry-2992885","entry":{"title":"electoral dragon","time":"2021-07-24T18:07:14.000Z","msg":"<p>Dont worry Nick, we are here for you and completely understand and agree with everything you said. We are more than halfway done tho, just need to grind out a few more chapters!</p>\n<p>Also, looking at the positive side of things, it is cool that the textbook has some pretty decent examples of the material and that we can supplement our understanding with articles/videos online.</p>"},"replies":[]}]},{"id":"entry-2992552","entry":{"title":"Deleted by passive owl on Jul 24 at 12:10am","time":null,"msg":""},"replies":[]},{"id":"entry-2992556","entry":{"title":"passive owl","time":"2021-07-24T07:11:10.000Z","msg":"<h3>Compare \"ret\" with \"return\" of C++</h3>\n<p>Does \"ret\" do the same thing as the \"return\" of C++? What is the next step after the \"ret\"? go back to the main PROC?</p>"},"replies":[{"id":"entry-2992848","entry":{"title":"loose llama","time":"2021-07-24T17:42:19.000Z","msg":"<p>The x86 \"ret\" is similar to C++ \"return\" in that it pops the return address off the stack and uses it to return back to the caller.&nbsp; An x86 C++ compiler will [probably depending on optimizations] generate an x86 \"ret\" when it compiles the C++ \"return\" state into x86 code.</p>\n<p>But it's important to note that the x86 \"ret\" doesn't actually return any value to the caller.&nbsp; So it's like a C++ return from a void function.&nbsp; In x86 assembly you can return values by register or pushing them on the stack or by setting a memory variable.</p>"},"replies":[]},{"id":"entry-2994930","entry":{"title":"envious earwig","time":"2021-07-25T19:22:19.000Z","msg":"<p>Hi!</p>\n<p>Here's a helpful link that explains \"ret\": <a href=\"https://www.quora.com/What-does-RET-instruction-do-in-assembly-language\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://www.quora.com/What-does-RET-instruction-do-in-assembly-language</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>Here is another helpful link: <a href=\"https://tetzank.github.io/posts/return-oriented-programming/\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://tetzank.github.io/posts/return-oriented-programming/</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>&nbsp;</p>"},"replies":[]}]},{"id":"entry-2993201","entry":{"title":"supposed swordtail","time":"2021-07-24T21:41:20.000Z","msg":"<h2>How does stack allocation work on OS level?</h2>\n<p>How does the operating system know where to allocate the stack space? If there are multiple programs running, how does the operating system allocate the stacks such that one program's stack doesn't intersect with another program's stack or with heap memory?</p>"},"replies":[{"id":"entry-2993801","entry":{"title":"brief bird","time":"2021-07-25T04:01:05.000Z","msg":"<p>Hi Ronak! I personally don't know the exact answer to your question but check out this page and hopefully, it'll answer your questions!</p>\n<p>https://icarus.cs.weber.edu/~dab/cs1410/textbook/4.Pointers/memory.html</p>"},"replies":[]},{"id":"entry-2996746","entry":{"title":"insufficient junglefowl","time":"2021-07-26T04:51:45.000Z","msg":"<p>Check out this link from stack overflow:&nbsp;</p>\n<p><a href=\"https://stackoverflow.com/questions/556714/how-does-the-stack-work-in-assembly-language\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://stackoverflow.com/questions/556714/how-does-the-stack-work-in-assembly-language</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>&nbsp;</p>"},"replies":[]}]},{"id":"entry-2993894","entry":{"title":"relaxed python","time":"2021-07-25T04:33:14.000Z","msg":"<p><strong>Question with the 5.2.5 EXAMPLE</strong></p>\n<p>ArraySum PROC<br>push esi&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;; save ESI, ECX<br>push ecx<br>mov eax,0 ; set the sum to zero<br>L1:<br>add eax,[esi]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; add each integer to sum<br>add esi,TYPE DWORD ; point to next integer<br>loop L1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; repeat for array size</p>\n<p>&nbsp;</p>\n<p>I have a question with the code above, I'm wondering why does \"add esi, TYPE DWORD\" point to the next integer?&nbsp;</p>"},"replies":[{"id":"entry-2995263","entry":{"title":"driving deer","time":"2021-07-25T21:54:51.000Z","msg":"<p>Hi Yen-Jung,</p>\n<p>I believe that the array representation in memory has all of the elements/integers together in sequential order. You have the address for the start of the array, which is the first element's address. This code uses the esi register to traverse the array. In this case, the type is DWORD so you need to increment by 4 bytes to get to the next element/integer in the array.</p>"},"replies":[]},{"id":"entry-2995471","entry":{"title":"spatial snipe","time":"2021-07-25T23:34:26.000Z","msg":"<p><span>TYPE DWORD returns the size of the DWORD type.&nbsp; &nbsp;Hence,</span></p>\n<p><span>add esi, TYPE DWORD will add esi value by 4, which points to next value in the array of type DWORD&nbsp;</span></p>\n<p>&nbsp;</p>\n<p><span>Additional reference:</span></p>\n<p><span>From Textbook 4.3.4 Section (page no. 11),&nbsp;</span></p>\n<div class=\"page\" title=\"Page 150\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>The TYPE operator returns the size, in bytes, of a single element of a variable. For example, the TYPE of a byte equals 1, the TYPE of a word equals 2, the TYPE of a doubleword is 4, and the TYPE of a quadword is 8. </span></p>\n</div>\n</div>\n</div>\n</div>"},"replies":[]}]},{"id":"entry-2994826","entry":{"title":"financial fowl","time":"2021-07-25T18:29:43.000Z","msg":"<p>I am having some trouble differentiating \"POP\" and \"POPAD.\" I know how stacks work thanks to java and the ability to code them, however I was wondering if there is a semantic difference between these two keywords. I haven't seen the latter in any other language.&nbsp;</p>"},"replies":[{"id":"entry-2994978","entry":{"title":"statutory squirrel","time":"2021-07-25T19:49:43.000Z","msg":"<p>Pretty sure POPAD means pop all double, which means its like multiple pop statements.&nbsp;</p>\n<p>Here are sources I used:</p>\n<p><a href=\"http://qcd.phys.cmu.edu/QCDcluster/intel/vtune/reference/vc246.htm\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>http://qcd.phys.cmu.edu/QCDcluster/intel/vtune/reference/vc246.htm</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p><a href=\"https://faydoc.tripod.com/cpu/popad.htm\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://faydoc.tripod.com/cpu/popad.htm</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>&nbsp;</p>"},"replies":[]},{"id":"entry-2995056","entry":{"title":"spatial snipe","time":"2021-07-25T20:20:48.000Z","msg":"<p><strong>TL, DR;</strong></p>\n<p>POP pops value on top of the stack,&nbsp; POPAD pops values in stack into general purpose registers in the order as mentioned in text book, <span style=\"font-family: inherit; font-size: 1rem;\">EAX, ECX, EDX, EBX, ESP (value before executing PUSHAD), EBP, ESI, and EDI</span></p>\n<p><strong>Longer Explanation:</strong></p>\n<p>After reading the text book, I noticed the following distinctions.&nbsp; Regular Stack Abstract Data Type is different from Runtime stack in assembly which is managed by processor directly.&nbsp; In Java and other programming languages, stack generally increments top position when a push operation happens, but runtime stack, top pointer address is decreased. (This is counter intuitive to what we learned earlier)</p>\n<p>Now coming to:</p>\n<p>Push - straight forward operation - pushes given value to runtime stack and decrements ESP&nbsp; (read above why its decremented)</p>\n<p>Pop - again straight forward operation - pops out top of runtime stack and copies to destination and increments ESP</p>\n<p>Before going to PUSHAD, POPAD,&nbsp; &nbsp;looking at PUSHFD (copies from EFLAGS and puts on top of runtime stack), POPFD (takes value at top of runtime stack into EFLAGS register),&nbsp; there will be certain situations, we need to save flags and restore the flag states after an operation is performed.&nbsp; Here think of a situation, you are calling a procedure, you need to store the current flags and when the program execution returns back to calling function, you need to restore the flags and nullify any effects that are resulted by the execution of called procedure.</p>\n<p>Similarly, if you need to save the values all general purpose registers (<span style=\"font-family: inherit; font-size: 1rem;\">EAX, ECX, EDX, EBX, ESP (value before executing PUSHAD), EBP, ESI, and EDI),&nbsp; you can use PUSHAD and when you want to restore previous state, you can call POPAD which restores values from stack into general purpose registers.</span></p>\n<p>It will be interesting to check, how the program behaves when runtime stack is empty and a POPAD is executed.</p>"},"replies":[]},{"id":"entry-2996480","entry":{"title":"faithful firefly","time":"2021-07-26T04:03:02.000Z","msg":"<p>POP pops the value on the top of the stack into a 16 or 32 bit general purpose register of your choice. PUSHAD and POPAD are used for storing and preserving the values of most 32 bit registers when you want to go to another procedure, do something that messes with 32 bit general purpose registers, and then restore (most) of your program state.</p>"},"replies":[]}]},{"id":"entry-2995066","entry":{"title":"ugliest trout","time":"2021-07-25T20:23:58.000Z","msg":"<p><span style=\"font-size: 14pt;\">POPAD POPFD</span></p>\n<p>I am still confuse about the use of POPAD and POPFD, like what are these two really use for?</p>"},"replies":[{"id":"entry-2995132","entry":{"title":"grumpy haddock","time":"2021-07-25T20:50:29.000Z","msg":"<p>Push and POPAD/POPFD are important for saving the information for before and after changes. Like if you making changes to several different registers, using push and popad, you can see the before and after to error check your code.</p>"},"replies":[]},{"id":"entry-2995860","entry":{"title":"puzzled pony","time":"2021-07-26T01:33:04.000Z","msg":"<p>This is a good video explaining PUSHF, POPF,PUSHFD and POPFD instructions:</p>\n<p><a href=\"https://www.youtube.com/watch?v=pgDCEqZQNlU\" class=\"external youtubed\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Assembly Language Programming Tutorial - 30 - PUSHF, POPF,PUSHFD and POPFD Instruction - YouTube</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a><a href=\"https://www.youtube.com/watch?v=pgDCEqZQNlU\" class=\"youtubed\">\n        <img src=\"/images/play_overlay.png\" class=\"media_comment_thumbnail\" style=\"background-image: url(//img.youtube.com/vi/pgDCEqZQNlU/2.jpg)\" alt=\"\">\n      </a></p>"},"replies":[]},{"id":"entry-2995954","entry":{"title":"conceptual catfish","time":"2021-07-26T02:05:51.000Z","msg":"<p>I also have this question thank you for asking!</p>"},"replies":[]}]},{"id":"entry-2995227","entry":{"title":"easy dolphin","time":"2021-07-25T21:38:38.000Z","msg":"<p>In the 4th video (Defining and Using Procedures, CALL and RET) of the provided lecture material, I don't understand why the program doesn't just end on line 12 (i.e. after blue returns and we move 1 to bx). Instead, it executes blue again and then ends. Please explain this to me. Thank you.</p>"},"replies":[{"id":"entry-2996421","entry":{"title":"Cole Gannon","time":"2021-07-26T03:52:02.000Z","msg":"<p>Here is my best guess. I am not very sure about this so if someone is able to find a better answer, please post it.</p>\n<ol>\n<li>mov ax, 1</li>\n<li>go to instruction 4 (blue)</li>\n<li>mov bx, 1</li>\n<li>(blue procedure starts here)</li>\n<li>mov ax, 4</li>\n<li>mov bx, 4</li>\n<li>return back to the previous procedure (line 3)</li>\n</ol>\n<p>Procedures are just abstractions over regular labels. Here's a program that does the same thing as the 4th video without procedures.</p>\n<pre><code>.386\n.model flat, stdcall\nExitProcess proto, code: dword\n\n.code\nmain:\n   mov ax, 1\n   push main$after_blue\n   jmp blue\nmain$after_blue:\n   mov bx, 2\nblue:\n   mov ax, 4\n   mov bx, 4\n   pop esi\n   jmp esi\n_start:\n   push _start$after_main\n   jmp main\n_start$after_main:\n   invoke ExitProcess, 0\nend _start</code></pre>\n<p>Though that kinda begs the question, doesn't it. Why isn't there a <code>pop esi</code> and then <code>jmp esi</code> in <code>main$after_blue</code>? I have no idea, to be honest. I'll do more investigating</p>"},"replies":[{"id":"entry-2996484","entry":{"title":"Cole Gannon","time":"2021-07-26T04:03:47.000Z","msg":"<p>The guy in the video decided not to have <code>ret</code> at the end of main for reasons we do not fully understand. See below for code with behavior you'd actually expect because I added <code>ret</code> at the end of main.</p>\n<pre><code>.386\n.model flat, stdcall\nExitProcess proto, code: dword\n\n.code\nmain proc\n   mov ax, 1\n   call blue\n   mov bx, 2\n   ret\nmain endp\n\nblue proc\n   mov ax, 4\n   mov bx, 4\n   ret\nblue endp\n\nend main\n</code></pre>"},"replies":[]}]}]},{"id":"entry-2996018","entry":{"title":"close buzzard","time":"2021-07-26T02:25:52.000Z","msg":"<p>Are nested procedure calls practical in assembly? Like are there use cases where it's better than not using it at all?</p>"},"replies":[{"id":"entry-2996217","entry":{"title":"surviving takin","time":"2021-07-26T03:07:37.000Z","msg":"<p>I feel like we will be learning a way to avoid unnecessary nesting in the coming chapters with Advanced Procedures.</p>"},"replies":[]}]},{"id":"entry-2996117","entry":{"title":"entitled earwig","time":"2021-07-26T02:47:19.000Z","msg":"<p><strong>Reason for using just pushfd, popfd being error-prone</strong></p>\n<p>In Chapter 5 p.143, the book says that using just pushfd and popfd can be error-prone, and that saving it into a variable is safer, but I didn't really understand why.</p>"},"replies":[]},{"id":"entry-2996315","entry":{"title":"advanced anaconda","time":"2021-07-26T03:30:33.000Z","msg":"<p>Do push and pop always come in pairs?</p>\n<p>After reading the stack operations, I am just curious about if we need to always use push/pop in pairs. Would a push without a pop cause any trouble in our programing? What if the stack is empty/full?</p>"},"replies":[{"id":"entry-2996661","entry":{"title":"breezy bird","time":"2021-07-26T04:35:07.000Z","msg":"Hi, I also have the same questions. Would greatly appreciate any help!"},"replies":[]},{"id":"entry-2997664","entry":{"title":"skilled silkworm","time":"2021-07-26T06:53:10.000Z","msg":"<p>Hi Sarah,</p>\n<p>I think push pop is like the two sides of a coin. If there is input there will be output as a result.</p>\n<p>This is where I found some helpful information:</p>\n<p><a class=\"inline_disabled external\" href=\"https://stackoverflow.com/questions/26026174/how-does-push-and-pop-work-in-assembly\" target=\"_blank\" rel=\"noreferrer noopener\"><span>https://stackoverflow.com/questions/26026174/how-does-push-and-pop-work-in-assembly</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>I hope it helps :)</p>"},"replies":[]}]},{"id":"entry-2997034","entry":{"title":"geographical gopher","time":"2021-07-26T05:34:22.000Z","msg":"<p>So I have a bit of a silly question, are there any benefits to \"losing\" your place in the program by manipulating pointers? I don't think there would be any, but maybe it could be an attack vector for some type of attack?</p>"},"replies":[]}]}