{
   "topic": {
      "title": "M9: Content Question (Advanced Procedures)",
      "time": null,
      "msg": "<p><span>Post questions about&nbsp;Advanced Procedures.</span><span>&nbsp;Use the first line of your post as the subject of the post.</span></p>"
   },
   "replies": [
      {
         "entry": {
            "title": "married llama",
            "time": "2021-07-28T17:48:44.000Z",
            "msg": "<p>Using MASM directives or do things manually?</p>\n<p>Chapter 8 talks about creating stack frames to manage parameters and local variables.&nbsp; It describes how to use the BSP register to work with stack frames.&nbsp; But it also shows a number of MASM directives that handles the details for us.&nbsp; For example, the MASM ENTER directive generates a few instructions to setup the stack frame and the LEAVE directive generates a few to clean it up.</p>\n<p>I imagine some Intel assemblers may not support the MASM directives.&nbsp; I'm not too familiar with all of the assembler choices but I do know that the GNU assembler does things very differently.&nbsp; I'm tempted to use the cleaner MASM \"shortcuts\" but I also feel that the saying \"no pain, no gain\" applies here.&nbsp; If use the individual instructions I might remember the concepts better but I may also might have more typo bugs.</p>\n<p>Do you prefer to use the MASM directives or the do it yourself?</p>"
         },
         "replies": [
            {
               "entry": {
                  "title": "similar salamander",
                  "time": "2021-07-31T01:52:20.000Z",
                  "msg": "<p>The directives seem easier to use. I like to use MASM directives, but I'm not sure which directives we're not supposed to use since the Professor said some directives we can't use.</p>"
               },
               "replies": [
                  {
                     "entry": {
                        "title": "hollow haddock",
                        "time": "2021-07-31T03:39:32.000Z",
                        "msg": "<p>I am the same, I would like to use MASM directives but not quite sure which ones we are allowed to use, since the professor hasn't lectured chapter 8, and specifically said which ones we can't use</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "clean bovid",
                        "time": "2021-08-02T05:20:17.000Z",
                        "msg": "<p>I use MASM</p>"
                     },
                     "replies": []
                  }
               ]
            },
            {
               "entry": {
                  "title": "unsightly toad",
                  "time": "2021-07-31T18:05:21.000Z",
                  "msg": "<p>I also prefer to use MASM directives which I think we are allowed to use since I don't think it was one of the ones that we can't use.</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "supposed squirrel",
                  "time": "2021-07-31T19:40:48.000Z",
                  "msg": "<p>I prefer to use MASM. I also do not know which directives we are allowed to know, so sorry about that.</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "hurt harrier",
                  "time": "2021-08-01T10:29:51.000Z",
                  "msg": "<p>I only know MASM directives</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "encouraging dragon",
                  "time": "2021-08-01T23:20:13.000Z",
                  "msg": "<p>I think it is always safer to avoid MASM directives if possible as it is not clear if the professor is okay with us using them.</p>"
               },
               "replies": [
                  {
                     "entry": {
                        "title": "cognitive buzzard",
                        "time": "2021-08-02T02:17:32.000Z",
                        "msg": "<p>Yeah I agree. While it may be easier to use MASM directives, they are not pure assembly which is the point why we are in this class.</p>"
                     },
                     "replies": []
                  }
               ]
            },
            {
               "entry": {
                  "title": "Cole Gannon",
                  "time": "2021-08-02T04:18:50.000Z",
                  "msg": "<p>MASM's invoke and abstraction over calling conventions is honestly really great when I want to use stuff in kernel32. Having to deal with passing arguments the stdcall way is cursed and horrible. Being able to declare a proc with parameters is very nice. If you ever end up having to deal with assembly either for gamedev, security, or otherwise, sure, it'd be useful to know how to actually pass arguments but right now, I'll be using as much invoke as I can get my hands on.</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "near mastodon",
                  "time": "2021-08-02T04:36:44.000Z",
                  "msg": "<p>I also like to use MASM directives but am confused about which ones we can not use. Hopefully, the professor gives us a list on the exam!</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "inland hummingbird",
                  "time": "2021-08-02T05:27:46.000Z",
                  "msg": "<p>I like using MASM directives but also dont know which ones were allowed to use. Maybe the professor will let us know!</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "broad bird",
                  "time": "2021-08-02T06:01:22.000Z",
                  "msg": "<p>I personally prefer to MASM as well.</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "alert ant",
                  "time": "2021-08-02T06:11:40.000Z",
                  "msg": "<p>I honestly just prefer to use MASM directly</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "spectacular silkworm",
                  "time": "2021-08-03T01:08:48.000Z",
                  "msg": "<p>I prefer MASM directives.</p>"
               },
               "replies": []
            }
         ]
      },
      {
         "entry": {
            "title": "married llama",
            "time": "2021-07-29T19:13:04.000Z",
            "msg": "<p>Why do we need ADDR if we can already use OFFSET?</p>\n<p>Section 8.4.2 discusses using INVOKE with ADDR to pass pointers to procedures.&nbsp; The book says that the argument must be an assembly time constant, like a variable name.&nbsp; But it seems that we can already use OFFSET when passing pointers to variables.</p>\n<p>For example:</p>\n<pre style=\"padding-left: 40px;\">PutText PROTO, SomeString:DWORD<br>.const<br>cMyText BYTE \"Don't touch my text!.\",0<br>.code<br>INVOKE PutText, ADDR cMyText    ; this works<br>INVOKE PutText, OFFSET cMyText  ; this works too</pre>\n<p>Why do we need ADDR when we can use OFFSET instead?</p>"
         },
         "replies": [
            {
               "entry": {
                  "title": "foolish fowl",
                  "time": "2021-07-30T20:44:48.000Z",
                  "msg": "<p><span>ADDR supports postindexed and preindexed addressing modes. These are:</span></p>\n<dl class=\"article-list\">\n<dt></dt>\n<dd>\n<p id=\"B9780128207352000056-p3070\">Preindexed: the address for the transfer is calculated with the offset and the base address register is subsequently updated to the accessed address.</p>\n</dd>\n<dt></dt>\n<dd>\n<p id=\"B9780128207352000056-p3075\">Postindexed: the address for the transfer does not include the offset, but the base address register is nonetheless subsequently updated with the offset.</p>\n<p>&nbsp;</p>\n<p>I believe it is a more in depth way of offsetting values (<a href=\"https://www.sciencedirect.com/topics/engineering/address-offset\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://www.sciencedirect.com/topics/engineering/address-offset</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>)</p>\n</dd>\n</dl>"
               },
               "replies": [
                  {
                     "entry": {
                        "title": "ethnic earthworm",
                        "time": "2021-08-01T03:01:03.000Z",
                        "msg": "<p>Thank you&nbsp;</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "unfair tick",
                        "time": "2021-08-01T23:06:07.000Z",
                        "msg": "<p>Ah, I had this same question thanks for the clarification.</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "constitutional cattle",
                        "time": "2021-08-02T00:06:32.000Z",
                        "msg": "<p>Thanks for clarifying that up and for the link! Helped out alot</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "dry cuckoo",
                        "time": "2021-08-02T00:46:53.000Z",
                        "msg": "<p>This has helped my confusion. Thanks.&nbsp;</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "continuing centipede",
                        "time": "2021-08-02T02:04:09.000Z",
                        "msg": "Thank you.&nbsp;"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "evolutionary earwig",
                        "time": "2021-08-02T03:28:01.000Z",
                        "msg": "<p>This helped a lot, thanks!</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "electric dolphin",
                        "time": "2021-08-02T05:44:22.000Z",
                        "msg": "<p>Hi, this makes it much more clear! Thank you.</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "pleased orca",
                        "time": "2021-08-02T05:45:38.000Z",
                        "msg": "<p>Thanks for the clarification, so much easier now.</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "useful trout",
                        "time": "2021-08-02T06:00:32.000Z",
                        "msg": "<p>Thank you!</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "broad bird",
                        "time": "2021-08-02T06:01:47.000Z",
                        "msg": "<p>Thanks, cleared up the misunderstanding I had.</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "conscious catfish",
                        "time": "2021-08-02T06:56:53.000Z",
                        "msg": "<p>Thank you for clarifying!</p>"
                     },
                     "replies": []
                  },
                  {
                     "entry": {
                        "title": "ripe python",
                        "time": "2021-08-02T17:49:27.000Z",
                        "msg": "<p>Thanks a lot or the resource link, that is really helpful!</p>"
                     },
                     "replies": []
                  }
               ]
            },
            {
               "entry": {
                  "title": "supposed squirrel",
                  "time": "2021-07-31T19:33:42.000Z",
                  "msg": "<p>Hi there! Here is another resource for you: <a href=\"https://www.hitxp.com/articles/software/difference-between-addr-and-offset/\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://www.hitxp.com/articles/software/difference-between-addr-and-offset/</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>&nbsp;</p>"
               },
               "replies": [
                  {
                     "entry": {
                        "title": "broken bird",
                        "time": "2021-08-02T04:36:07.000Z",
                        "msg": "<p>This was a really helpful read! Thank you for sharing this source.</p>"
                     },
                     "replies": []
                  }
               ]
            },
            {
               "entry": {
                  "title": "regulatory pony",
                  "time": "2021-08-01T21:57:12.000Z",
                  "msg": "<p>This could be a helpful source:</p>\n<p><a href=\"http://www.c-jump.com/CIS77/ASM/Instructions/I77_0220_addr_n_offset.htm\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>http://www.c-jump.com/CIS77/ASM/Instructions/I77_0220_addr_n_offset.htm</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>&nbsp;</p>"
               },
               "replies": [
                  {
                     "entry": {
                        "title": "adverse anaconda",
                        "time": "2021-08-02T03:24:41.000Z",
                        "msg": "<p>Thanks for the link that helps understand the addr operator.</p>"
                     },
                     "replies": []
                  }
               ]
            },
            {
               "entry": {
                  "title": "striking snipe",
                  "time": "2021-08-02T02:19:05.000Z",
                  "msg": "<p>Good question! I didn't think of this, until I read your question and the links posted here in the replies.</p>\n<p>So effectively it translates to usage of OFFSET when the variables are declared before hand, however if we need to get the address of undeclared variables which is local to a procedure,&nbsp; ADDR will get the latest stack address using LEA (load effective address) and push the declared local variable onto stack.&nbsp;</p>"
               },
               "replies": []
            }
         ]
      },
      {
         "entry": {
            "title": "thoughtless swordtail",
            "time": "2021-08-01T05:10:16.000Z",
            "msg": "<h2>Procedure return values</h2>\n<p>How can procedures return values. For example, how would the following return a value</p>\n<p><code>\n    int add(x, y)<br>\n    {<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;return x + y;<br>\n    }<br>\n  </code></p>\n<p>Would this return a value by referencing the local variable in the caller's stack frame by adding to ebp?</p>"
         },
         "replies": [
            {
               "entry": {
                  "title": "federal firefly",
                  "time": "2021-08-02T02:29:13.000Z",
                  "msg": "In most of the examples and the MS calling convention, return values are saved in a register. This prevents corrupting the already balanced stack outside of your procedure."
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "early deer",
                  "time": "2021-08-02T04:48:45.000Z",
                  "msg": "<p>Hi Ronak,</p>\n<p>I think that you often designate a register to store the return value. Since this register's value needs to be saved after the procedure is called, you should not push and pop its original value as you may do for some other registers, which have values that need to be preserved. This means that you would not be using the USES mnemonic.&nbsp;</p>"
               },
               "replies": []
            },
            {
               "entry": {
                  "title": "forward frog",
                  "time": "2021-08-02T06:34:07.000Z",
                  "msg": "<p>I agree with Aryan. You just move the value into a register where you can later use it.</p>"
               },
               "replies": []
            }
         ]
      },
      {
         "entry": {
            "title": "robust quail",
            "time": "2021-08-01T23:06:44.000Z",
            "msg": "<p>is it possible to import files?</p>"
         },
         "replies": [
            {
               "entry": {
                  "title": "itchy junglefowl",
                  "time": "2021-08-01T23:13:12.000Z",
                  "msg": "<p>you can import using AS</p>\n<p>here is a good reference:</p>\n<p>https://stackoverflow.com/questions/64017319/proper-way-to-do-imports-with-gas</p>"
               },
               "replies": []
            }
         ]
      },
      {
         "entry": {
            "title": "grand gopher",
            "time": "2021-08-01T23:13:20.000Z",
            "msg": "<p>The textbook says \"The subroutines, in turn, usually store their local variables on the stack.\" but I thought languages like C / C++ would store in memory, if it was in the stack wouldn't it always have to juggle the data around? I could understand pushing arguments and such, but I'm not sure. This makes me want to read some of my old 22A/22B/22C labs in assembly.</p>"
         },
         "replies": [
            {
               "entry": {
                  "title": "dry cuckoo",
                  "time": "2021-08-02T00:36:47.000Z",
                  "msg": "<p>Same here - I feel that my previous knowledge got challenged as I am reading through how variable works at assembly level...</p>"
               },
               "replies": []
            }
         ]
      },
      {
         "entry": {
            "title": "total takin",
            "time": "2021-08-02T02:52:50.000Z",
            "msg": "<p>Out of curiosity, what's the 64-bit equivalent of the INVOKE directive?&nbsp;</p>"
         },
         "replies": []
      },
      {
         "entry": {
            "title": "gradual gopher",
            "time": "2021-08-02T03:23:51.000Z",
            "msg": "<p>Two possible ways of calling DumpMem. Which is easier?</p>\n<p>pushad</p>\n<p>mov esi, OFFSET array</p>\n<p>mov ecx, LENGTHOF array</p>\n<p>mov ebx, TYPE array</p>\n<p>call DumpMem</p>\n<p>popad&nbsp;</p>\n<p>OR</p>\n<p>push TYPE array</p>\n<p>push LENGTHOF array</p>\n<p>push OFFSET array</p>\n<p>call DumpMem</p>"
         },
         "replies": [
            {
               "entry": {
                  "title": "evident earwig",
                  "time": "2021-08-02T04:05:37.000Z",
                  "msg": "<p>I think the second code shown in the textbook was just hypothetical, that&nbsp;<strong>if&nbsp;</strong>dumpmem used stack parameters, that would be the code, and only the first code will actually work.</p>"
               },
               "replies": []
            }
         ]
      },
      {
         "entry": {
            "title": "evident earwig",
            "time": "2021-08-02T04:11:53.000Z",
            "msg": "<p><strong>Number used with ret</strong></p>\n<p>I don't understand what the number used with ret means, which is apparently used to clean up the stack. Is it the number of values on the stack used by the procedure? Is it the total memory of them?</p>"
         },
         "replies": [
            {
               "entry": {
                  "title": "evident earwig",
                  "time": "2021-08-02T21:09:01.000Z",
                  "msg": "<p>I think the optional number parameter is used to specify the number of stack bytes or words to be released after the return address is popped from the stack.&nbsp;</p>"
               },
               "replies": []
            }
         ]
      },
      {
         "entry": {
            "title": "radical pigeon",
            "time": "2021-08-02T13:55:51.000Z",
            "msg": "<p>Can anyone explain how stack frames work?</p>"
         },
         "replies": []
      }
   ]
}