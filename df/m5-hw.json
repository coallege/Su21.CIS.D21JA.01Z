{"topic":{"title":"Discussion: HW-M5","msg":"<p><span>Post questions about Section 4.9.2 of textbook Assembly Programming: prob 13- Section 4.10 probs 1,2,3,4, 5.&nbsp;Use the first line of your post as the subject of the post.</span></p>\n<p>&nbsp;</p>"},"replies":[{"entry":{"title":"loose llama","msg":"<p style=\"margin-bottom: 0in; line-height: 100%;\">32-bit mode or 64-bit mode?</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">&nbsp;</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">The homework says that the programming exercises can be completed in 32 or 64 bit mode.&nbsp; I know we are focused on 32 bit only but is it acceptable to submit 64 bit mode for these programming exercises?</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">&nbsp;</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">\"4.10 Programming Exercises</p>\n<p style=\"margin-bottom: 0in; line-height: 100%;\">The following exercises may be completed in either 32-bit mode or 64-bit mode.\"</p>"},"replies":[{"entry":{"title":"financial fowl","msg":"<p>The professor said a while ago that no matter what the homework said, you should only focus on writing your code on 32 bit.&nbsp;</p>"},"replies":[]},{"entry":{"title":"insufficient junglefowl","msg":"<p>This entire class is in 32-bit mode.</p>"},"replies":[]},{"entry":{"title":"electoral dragon","msg":"<p>I agree that the hw should be done in 32 bit mode. But also wanted to ask if this means that it is ok to skip the sections in the book that specifically talk about 64 bit mode?</p>"},"replies":[]},{"entry":{"title":"occasional muskox","msg":"<p>I don't believe we need to worry about the 64-bit content.</p>\n<p>&nbsp;</p>"},"replies":[]},{"entry":{"title":"skilled silkworm","msg":"<p>32 bit mode is what we are learning so far. We might have some opportunity to learn 64 bit mode at the end.</p>"},"replies":[]},{"entry":{"title":"breezy bird","msg":"<p>Yep, 32 bit is what we have been learning and is going to be in 32 - bit mode for the entire class.</p>"},"replies":[]},{"entry":{"title":"thin tick","msg":"<p>I was wondering this as well because of the professor's emphasis on only using 32-bit.</p>"},"replies":[]},{"entry":{"title":"hilarious harrier","msg":"<p>Should be 32 bit mode</p>\n<p>&nbsp;</p>"},"replies":[]}]},{"entry":{"title":"dizzy cuckoo","msg":"<p>Just a note from the class tonight on programming homework submission for:</p>\n<p>Only submit .code section in a text file, plus .data section if you have declared any data. The purpose is that the professor can then copy your code and execute it in a non-Microsoft assembler.&nbsp; Thanks!</p>"},"replies":[{"entry":{"title":"secure salamander","msg":"<p>I submitted way more than this, but I'll keep it in mind from now on.</p>"},"replies":[]},{"entry":{"title":"consistent centipede","msg":"<p>Thanks for making note of this, I also have been submitting the entire .asm file, so knowing that we only need to include the .data &amp; .code is better.</p>"},"replies":[]},{"entry":{"title":"statutory squirrel","msg":"<p>Thanks a bunch! Great to know this,</p>"},"replies":[]},{"entry":{"title":"ugliest trout","msg":"<p>Thank you so much!</p>"},"replies":[]},{"entry":{"title":"faithful firefly","msg":"<p>Also, and this has been said a million times, you can leave out the main proc, exitprocess, and dumpregs/other irvine stuff.</p>"},"replies":[]},{"entry":{"title":"abstract aardwolf","msg":"<p>Thanks for the reminder! Good to know this.</p>"},"replies":[]},{"entry":{"title":"conscious cattle","msg":"<p>Thank you Amy. Glad to know about this.</p>"},"replies":[]},{"entry":{"title":"close buzzard","msg":"<p>It just makes it easier for the professor, as the other parts are not implemented by us and is just part of the template to make sure it compiles.</p>"},"replies":[]},{"entry":{"title":"breezy bird","msg":"<p>Thank you, would have totally missed this!</p>"},"replies":[]},{"entry":{"title":"surviving takin","msg":"<p>Will we be marked off if we submitted the whole thing already? (for former homeworks)</p>"},"replies":[]},{"entry":{"title":"overseas orca","msg":"<p>Thanks, appreciate it! Totally would've missed this.</p>"},"replies":[]}]},{"entry":{"title":"professional pigeon","msg":"<p><strong><span style=\"font-size: 36pt;\">Fibonacci numbers in Assembly?</span></strong></p>\n<p><span style=\"font-size: 12pt;\">how do we implement it?</span></p>"},"replies":[{"entry":{"title":"insufficient junglefowl","msg":"<p>Here are some examples from stack overflow:</p>\n<p>https://stackoverflow.com/questions/32659715/assembly-language-x86-how-to-create-a-loop-to-calculate-fibonacci-sequence</p>"},"replies":[]},{"entry":{"title":"statutory squirrel","msg":"<p>Hi there! Summer gave a nice resource. Here is another useful one: https://chevythunder82.tripod.com/coursework/COMP235/fibonacci.html</p>"},"replies":[]},{"entry":{"title":"envious earwig","msg":"<p>Hi! Here is a good resource that also provides other helpful links: <a href=\"https://www.programmersought.com/article/20332992916/\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://www.programmersought.com/article/20332992916/</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>"},"replies":[]},{"entry":{"title":"tough toad","msg":"<p>Hey!&nbsp; I also found another link that might be helpful!</p>\n<p>https://titanwolf.org/Network/Articles/Article?AID=fb26d35b-eba3-4dee-afcc-0e64ac5cad86#gsc.tab=0</p>"},"replies":[]},{"entry":{"title":"implicit hoverfly","msg":"<p>I had the same difficulty. So I found a good material while searching.</p>\n<p>https://stackoverflow.com/questions/32659715/assembly-language-x86-how-to-create-a-loop-to-calculate-fibonacci-sequence</p>"},"replies":[]},{"entry":{"title":"relieved quail","msg":"<p>Thank you for the resources. They are helping me out!</p>"},"replies":[]},{"entry":{"title":"agricultural ant","msg":"<p>This is what I used: <a href=\"https://blog.seso.io/posts/creating-a-fibonacci-generator-in-assembly/\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://blog.seso.io/posts/creating-a-fibonacci-generator-in-assembly/</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>&nbsp;</p>"},"replies":[]},{"entry":{"title":"skilled silkworm","msg":"<p>Hi Darren,</p>\n<p>This is one of the tough questions in my opinion. This is where I went for further materials</p>\n<p><a class=\"inline_disabled external\" href=\"https://assembly.happycodings.com/code1.html\" target=\"_blank\" rel=\"noreferrer noopener\"><span>https://assembly.happycodings.com/code1.html</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>I hope this helps.</p>"},"replies":[]}]},{"entry":{"title":"easy dolphin","msg":"<p><strong>Converting from Big Endian to Little Endian</strong></p>\n<p>In problem 1 of section 4.10, it is my understanding from the question that the order of the bytes in bigEndian should be reversed in littleEndian, i.e, it should be 78h, 56h, 34h, 12h. However, to me it looks like the chapter 4 solutions posted maintains the original order of bigEndian in littleEndian as well. Did I get this wrong? Please explain this to me. Thank you.</p>"},"replies":[{"entry":{"title":"supposed swordtail","msg":"<p>The chapter 4 solutions change it to little endian. It looks like it kept the byte ordering as big endian since DumpRegs prints out the bytes in big endian order. Try moving 1 to EAX and calling DumpRegs to see this.</p>"},"replies":[]},{"entry":{"title":"grumpy haddock","msg":"<p>In the book, section 4.5.3 shows how you can see the elements of an array while debugging, which could be helpful to see if the array becomes littleEndian.</p>"},"replies":[]},{"entry":{"title":"easy dolphin","msg":"<p>Thank you for your replies! This makes a bit more sense.&nbsp;</p>"},"replies":[]},{"entry":{"title":"dizzy cuckoo","msg":"<p>Thanks this is very helpful while I am also struggling with HW.&nbsp;</p>"},"replies":[]},{"entry":{"title":"spatial snipe","msg":"<p><a href=\"https://stackoverflow.com/questions/35713272/big-endian-to-little-endian\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://stackoverflow.com/questions/35713272/big-endian-to-little-endian</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a> has pretty good explanation of this problem.&nbsp;</p>\n<div class=\"page\" title=\"Page 172\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span>bigEndian BYTE 12h,34h,56h,78h </span></p>\n<p><span>littleEndian will reverse the way it is stored. if i need to declare i will use</span></p>\n<p>littleEndian BYTE 78h, 56h, 34h, 12h</p>\n<p>To do it programmatically:&nbsp; (using indirect addressing, reading from bigEndian array and then moving register values in opposite order - have to say little tricky to get it at first.&nbsp; Another way implement is to use two pointers from start and end of array and keep swapping numbers at those pointers till it meets in the middle or low &lt; high condition)</p>\n<pre><code>mov al,DWORD PTR bigEndian+0\nmov ah,DWORD PTR bigEndian+1\nmov bl,DWORD PTR bigEndian+2\nmov bh,DWORD PTR bigEndian+3\n\nmov littleEndian+0,bh\nmov littleEndian+1,bl\nmov littleEndian+2,ah\nmov littleEndian+3,al</code></pre>\n</div>\n</div>\n</div>\n</div>"},"replies":[]},{"entry":{"title":"Cole Gannon","msg":"<p>There is a x86 instruction to do it for you :)</p>"},"replies":[]}]},{"entry":{"title":"relaxed python","msg":"<p>Fibonacci Numbers question</p>\n<p>I have some question with the problem 5 of section 4.10. I'm wondering how should I start this program with? Any other method than loop should I use?<br><br></p>"},"replies":[{"entry":{"title":"puzzled pony","msg":"<p>This might be a good resource to get started with pseudocode and diagram given.</p>\n<ul>\n<li><a href=\"https://www.quora.com/What-is-a-pseudocode-for-fibonnaic-series\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>What is a pseudocode for fibonnaic series? - Quora</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></li>\n</ul>"},"replies":[]},{"entry":{"title":"dizzy cuckoo","msg":"<p>Hello Yen-Jung!</p>\n<p>Here is my approach:</p>\n<p>The first and second Fibonacci numbers are given: both are 1. We need to find out the next 5 F numbers by summing the previous two Fibonacci numbers.</p>\n<p>Declare data array of 7 elements, first two values known;</p>\n<p>Declare count = 5, move to ECX. ECX is used the LOOP internally.&nbsp;</p>\n<p>Get the OFFSET of the data array</p>\n<p>Move the pointer to the 3rd number (ADD ESI, TYPE array twice)</p>\n<p>Inside the loop:</p>\n<p>read the two numbers before the current location by using indexed addressing:</p>\n<p>MOV eax, [ESI-4] -&gt; move backwards 4 bytes to get the value immediately before current memory location;</p>\n<p>MOV eax, [esi -8] - &gt; move backwards 8 bytes,</p>\n<p>Add above two values, assign to the memeory address of the current element memory.&nbsp;</p>\n<p>Move the pointer to next in the array.&nbsp;</p>\n<p>Hope this helps and good luck!</p>\n<div class=\"page\" title=\"Page 155\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>&nbsp;</p>\n</div>\n</div>\n</div>\n</div>"},"replies":[]},{"entry":{"title":"brief bird","msg":"<p>These replies are really helpful as I was going to ask this same question. Thanks, everyone!</p>"},"replies":[]}]},{"entry":{"title":"passive owl","msg":"<p>PTR Using</p>\n<p>I think I have to use PTR to get access to the array's item. Is my understanding correct?</p>\n<p>For probs1, can I move the bigEndian array's item to bx(bh &amp; bl) temporarily instead of ax(al &amp; ah)?</p>"},"replies":[{"entry":{"title":"enormous earthworm","msg":"<p>According to <a href=\"https://stackoverflow.com/questions/2864011/accessing-arrays-element-in-assembly-language-windows\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://stackoverflow.com/questions/2864011/accessing-arrays-element-in-assembly-language-windows</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>I don't think you have to use a PTR&nbsp;</p>"},"replies":[]}]},{"entry":{"title":"genuine gopher","msg":"<p>Problem 3 Summing the Gaps between Array Values</p>\n<p>For question 3 what does it mean by the array {0, 2, 5, 9, 10} has gaps of 2, 3, 4, and 1 and whats the reason we need to know this?</p>"},"replies":[{"entry":{"title":"entitled earwig","msg":"<p>When it says gaps, it refers to the difference between consecutive array elements.</p>"},"replies":[]},{"entry":{"title":"advanced anaconda","msg":"<p>I think this question is a practice for us to loop through an array and do some calculations around it.</p>\n<p>The gap means the difference between two consecutive array elements, which can be calculated by subtracting the left element by the right element. For example, 2-0=2, 5-2=3, 9-5=4, 10-9=1.</p>"},"replies":[]},{"entry":{"title":"surviving takin","msg":"<p>In addition to what Sarah stated, it's simply just an algebra problem that is solved using array functionalities so that's really all you need to know to figure it out.</p>"},"replies":[]}]},{"entry":{"title":"geographical gopher","msg":"<p>I'm confused on question 2:</p>\n<p>If the input array is values 1,2,3,4,5,6 etc are they saying the output should be 2,1,4,3,6,5? This is also the midterm question so I need to make sure I don't get messed up by the wording lol.&nbsp;</p>"},"replies":[{"entry":{"title":"driving deer","msg":"<p>Hi Aaron,</p>\n<p>That is also how I interpreted the question. It says that item i needs to be swapped with item i+1, and then item i+2 with item i+3. So if i is 0, then item 0 is swapped with item 1, and item 2 is swapped with item 3. I believe that you must also assume that the array contains an even number of elements so you do not need to worry about the condition where there's an odd number.</p>"},"replies":[]}]},{"entry":{"title":"conceptual catfish","msg":"<p>Problem #2 - Exchanging Pairs of Array Values</p>\n<p>Can someone further explain the instructions of this problem, I am not quite sure what I am suppose to be doing.</p>"},"replies":[]},{"entry":{"title":"conceptual catfish","msg":"<p>Problem #2 - Exchanging Pairs of Array Values</p>\n<p>Can someone further explain the instructions of this problem, I am not quite sure what I am suppose to be doing.</p>"},"replies":[{"entry":{"title":"entitled earwig","msg":"<p>I think all you have to do is just use a loop and loop through moving and exchanging the register values.</p>"},"replies":[]}]},{"entry":{"title":"moaning mastodon","msg":"I’m still very confused on question 5. Can someone give me a hint?"},"replies":[{"entry":{"title":"conscious cattle","msg":"<p>Hey Aman,&nbsp;</p>\n<p>I found this on stackoverflow to initiate the question. Hope that helps.</p>\n<p><a href=\"https://stackoverflow.com/questions/12865984/x86-fibonacci-program\" class=\"external\" target=\"_blank\" rel=\"noreferrer noopener\"><span>assembly - X86 Fibonacci program - Stack Overflow</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>"},"replies":[]},{"entry":{"title":"civic bovid","msg":"<p>Thank you Ajay. I'm stuck in this question too.</p>"},"replies":[]}]}]}