{"topic":{"title":"M1: Content Question (data representaion)","msg":"<p><span>Post questions about data representation.</span><span>&nbsp;Use the first line of your post as the subject of the post.</span></p>"},"replies":[{"entry":{"title":"financial fowl","msg":"<p><span style=\"font-size: 24pt;\"><strong>Unsigned v Two's-Complement Encodings</strong></span></p>\n<p><span style=\"font-size: 12pt;\">After reading the second chapter, I still don't get the difference between these two encodings. I saw that there are negative values in the latter but not the former. But how would one know when to use which one?</span></p>"},"replies":[{"entry":{"title":"spatial snipe","msg":"<p>This StackOverflow discussion will be helpful:</p>\n<p><a href=\"https://stackoverflow.com/questions/1125304/why-prefer-twos-complement-over-sign-and-magnitude-for-signed-numbers\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://stackoverflow.com/questions/1125304/why-prefer-twos-complement-over-sign-and-magnitude-for-signed-numbers</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>&nbsp;</p>\n<p><span>Short Answer: (wikipedia)</span></p>\n<p><span>The two's-complement system has the advantage of not requiring that the addition and subtraction circuitry examine the signs of the operands to determine whether to add or subtract. This property makes the system both simpler to implement and capable of easily handling higher precision arithmetic. Also, zero has only a single representation, obviating the subtleties associated with negative zero, which exists in ones'-complement systems.</span></p>"},"replies":[]},{"entry":{"title":"Cole Gannon","msg":"<p>Unsigned is when you don't care about representing negative integers. It's good for stuff like array indices or counters that only go up. Signed integers include negative integers and there are two ways of doing it: one's complement and two's complement. Pretty much everything uses two's complement for representing signed integers because it's just-better. If ya don't need negative numbers, don't use signed integers.</p>"},"replies":[]},{"entry":{"title":"conscious cattle","msg":"<p>For the most part, your compiler will almost always use two's-complement for arithmetic variables so you won't have to worry about that issue when you are programming normally but if you ever do need to use it for something like a counter or a value that is strictly non-negative then it you could use an unsigned value. Just be careful when performing operations between signed and unsigned values as the compiler will cast them to one or the other which definitely can have an affect on how your program will run. Personally I wouldn't really use them except in certain cases as it could just make a program more complex than it needs to be and could be a hassle to debug later on.</p>"},"replies":[]},{"entry":{"title":"conceptual catfish","msg":"<p>Are we able to do calculations with unsigned and signed integers?</p>"},"replies":[]}]},{"entry":{"title":"wasteful wildebeest","msg":"<h2>Hexidecimal notation</h2>\n<p>Can someone go further into detail how hexidecimals work? The textbook words it kind of weirdly. Is it like a multiplication table for letters and numbers?</p>"},"replies":[{"entry":{"title":"secure salamander","msg":"<p>Kind of. Hexadecimals is like a numbering system used to simplify the binary numbering system. We use base 16 notation for it, 0-9 represents numbers 0-9 and 10-15 represents A-F. So each of the hex numbers represent 4 binary digits. Here's a chart that shows what each hexidecimal corresponds to in binary. You can memorize it easier by remembering that the binary digits correspond to a number. From right to left it goes 1, 2, 4, 8. When the digit is a 1, you add it. When the digit is 0, you don't do anything or just add 0. So, for example, if you had a binary digit of 0110, it would be 0+4+2+0=6. But if you had 1110, it would be 8+4+2+0=14, which corresponds to E in hexadecimal. I hope I didn't make it more confusing.&nbsp;</p>\n<p><img src=\"https://deanza.instructure.com/users/155089/files/5502726/preview?verifier=YBnTrRIFRMNeLtrbnlADzWXX2rBe9yeIueIEciWo\" alt=\"1_8j6O7L1gWQOqHyTUIEcEIA.png\" data-api-endpoint=\"https://deanza.instructure.com/api/v1/users/155089/files/5502726\" data-api-returntype=\"File\" style=\"max-width: 790px;\"> &nbsp;</p>"},"replies":[]},{"entry":{"title":"puzzled pony","msg":"<p>Here's a good video that intros binary and hexadecimal numbers:</p>\n<p><a href=\"https://www.youtube.com/watch?v=ZL-LhaaMTTE\" class=\"external youtubed\" target=\"_blank\" rel=\"noreferrer noopener\"><span>Understanding Binary, Hexadecimal, Decimal (Base-10), and more - YouTube</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a><a href=\"https://www.youtube.com/watch?v=ZL-LhaaMTTE\" class=\"youtubed\">\n        <img src=\"/images/play_overlay.png\" class=\"media_comment_thumbnail\" style=\"background-image: url(//img.youtube.com/vi/ZL-LhaaMTTE/2.jpg)\" alt=\"\">\n      </a></p>"},"replies":[{"entry":{"title":"abstract aardwolf","msg":"<p>Hi Phaniteja,</p>\n<p>Thanks for sharing the video. It was clear and helpful!</p>"},"replies":[]},{"entry":{"title":"magnificent louse","msg":"Hi&nbsp;<span style=\"font-size: 14px;  \">Phaniteja</span><div><span style=\"font-size: 14px;  \">This video really help my a lot to understand this</span></div>"},"replies":[]}]},{"entry":{"title":"faithful firefly","msg":"<p>If you struggle to use just hex numbers, I like to memorize the hex values in decimal by how they close they are to one another. Instead of memorizing the value of e and d, I just remember they are 1 and 2 below f, which is 15 in decimal. The same for b and c, but they are 1 and 2 above a which is 10 in decimal. That way I don't have to memorize b-e.</p>"},"replies":[]},{"entry":{"title":"brief bird","msg":"<p>Hi Hwanhee! I was also confused by this so I looked it up and found this Khan Academy video really useful! He's really good at explaining things in easy-to-understand language.</p>\n<p><a href=\"https://www.youtube.com/watch?v=4EJay-6Bioo&amp;ab_channel=KhanAcademy\" target=\"_blank\" class=\"external youtubed\" rel=\"noreferrer noopener\"><span>https://www.youtube.com/watch?v=4EJay-6Bioo&amp;ab_channel=KhanAcademy</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a><a href=\"https://www.youtube.com/watch?v=4EJay-6Bioo&amp;ab_channel=KhanAcademy\" class=\"youtubed\">\n        <img src=\"/images/play_overlay.png\" class=\"media_comment_thumbnail\" style=\"background-image: url(//img.youtube.com/vi/4EJay-6Bioo/2.jpg)\" alt=\"\">\n      </a></p>\n<p>Hope this helps!</p>"},"replies":[]}]},{"entry":{"title":"professional pigeon","msg":"<p><span style=\"font-size: 24pt;\">types of data representation</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 12pt;\">how many types of data representation are there?</span></p>"},"replies":[{"entry":{"title":"overseas orca","msg":"<p>As relating to this course in particular, the most common ones you need to know are the binary, decimal, and hexadecimal number systems. These, along with the octal number system, is what most computers use to process and store data. In a more general sense, data representation is a pretty broad term, as it can be used to describe any form of data storage or processing.</p>"},"replies":[]},{"entry":{"title":"shiny shark","msg":"<p>Reference: https://www.tutorialspoint.com/unsigned-and-signed-binary-numbers<img src=\"https://deanza.instructure.com/users/182305/files/5505861/preview?verifier=iIT0zjohxyp6imwSox3AfqrONxemUlSCVBHTfkQh\" alt=\"binary_rep.jpg\" data-api-endpoint=\"https://deanza.instructure.com/api/v1/users/182305/files/5505861\" data-api-returntype=\"File\" style=\"max-width: 600px;\">&nbsp;</p>"},"replies":[]},{"entry":{"title":"loose llama","msg":"<p>I think it's limited to your imagination.</p>\n<p>Digital circuitry represents data via little switches turning on and off (transistors).&nbsp; We think of those on/off switches as binary 1s and 0s.&nbsp; A few 1s and 0s are easy enough to work with but our world is not about 1s and 0s.&nbsp; It's about numeric values, strings of characters, video game enemies, stars in the sky.</p>\n<p>Binary is obviously a direct representation of those 1s and 0s. &nbsp;We are more familiar with Decimal but it doesn't really fit nicely into a set of 1s and 0s.&nbsp; Hexadecimal is useful because it does fit nicely into groups of four 1s and 0s.&nbsp; Each Hexadecimal value is exactly 4 bits which provides 16 combinations of 1s and 0s yielding 16 values from 0 to F.&nbsp; It used to be common to use Octal too back in the stone age.</p>\n<p>But that's just the very lowest level of data representation.&nbsp; We know that a series of bytes are used to encode strings such as \"Hello World!\".&nbsp; That is data representation too.&nbsp; An enemy in a video game might be represented by the binary value 01101101.&nbsp; A Red colored pixel on your phone might be represented by the hexadecimal value FFFFFFFF0000000000000000 which is a lot of tiny little on/off switch 1s and 0s.&nbsp; If you were monitoring stars in the galaxy you might encode our own sun using an arbitrary number of bits.&nbsp; I'd like to think you'd number it Star #1 but you could choose any value you want.</p>\n<p>The point is that internally the computer is made of transistors that operate as tiny little on/off switches.&nbsp; We give context to the switches and assign values of 1 and 0 to each switch state.&nbsp; Collectively, we use groups of on/off switches to represent values and other things.&nbsp; We often use them as values to perform calculations.&nbsp; But you can use them for anything you want.&nbsp;</p>"},"replies":[]}]},{"entry":{"title":"passive owl","msg":"<h3><span style=\"font-size: 18pt;\"><strong>binary and hexadecimal's relationship</strong></span></h3>\n<p>In this module, we learned about binary and hexadecimal. However, I am not very clear about the relationship between binary and hexadecimal respectively. What is the relationship between both? Which areas are focused on binary and which areas are focused on hexadecimal in terms of this module?</p>"},"replies":[{"entry":{"title":"occasional muskox","msg":"<p>Binary and Hexadecimal are two separate ways of representing numbers, along with decimal; while binary is tedious to write out and decimal is tedious to convert, hexadecimal condenses binary for efficiency. For example, 1111 in binary can be represented simply as F in hexadecimal.</p>\n<p>As shown in the book, the 24-bit (24-digit) binary number 000101110011101001001100 can be broken apart into groups of 4 bits each, i.e.</p>\n<p>0001 0111 0011 1010 0100 1100, which translates to</p>\n<p>1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 7&nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A&nbsp; &nbsp; &nbsp; &nbsp;4&nbsp; &nbsp; &nbsp; &nbsp; C</p>\n<p>= 173A4C in the hexadecimal representation.</p>"},"replies":[]},{"entry":{"title":"fixed frog","msg":"<p>Binary and Hex are essentially different ways to count things.&nbsp; Binary is base 2, having inputs of 0 and 1. They are the most primitive way to count things for computers like true and false. Hex was made as an easier way to count binary since the 1 and 0's can be hard to distinguish in long strings. Hex is base 16, having 0 - 9, A-F.&nbsp; Hex has letters to make it distinguishable from binary and decimal. In the book, we learn how to convert binary to hex as a way to easily read long binary strings. Why 16 numbers, its because it's a power of 2, and helps when doing calculations with computers.<br><br><a class=\"inline_disabled external\" href=\"https://miro.medium.com/max/1208/1*PkHLh296lpvyEyJ2KPxdSw.png\" target=\"_blank\" rel=\"noreferrer noopener\"><span>https://miro.medium.com/max/1208/1*PkHLh296lpvyEyJ2KPxdSw.png</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>"},"replies":[]},{"entry":{"title":"statutory squirrel","msg":"<p>Just like the other two replies stated, binary and hexadecimals are just a way to represent numbers. Binary is base 2 (uses 0 and 1) and hexadecimal is base 16 (0 - 9 and A - F). The decimal system (the one we mostly use for day to day basis) is base 10 (0 - 9). Both hexadecimals and binary representations can be useful in different cases. Hexadecimals can simplify binary representation by a lot (more human friendly) and can be used for things like color values. You can also convert between the three representations (For example: from decimal to binary and then from binary to hexadecimal).&nbsp;</p>"},"replies":[]},{"entry":{"title":"implicit hoverfly","msg":"<p>They are all a number system. We are one of the various number systems created to count.<br>Binary numbers are expressed as 0 and 1. It is a method of expressing the number by adding six characters from A to F to ten numbers from 0 to 9. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 are used together like decimal numbers, and 10, 11, 12, 13, 14, and 15 are borrowed from the English alphabet capital letters A, B, C, D, E and F. For example, a hexadecimal representation of 15 makes F and 26 makes 1A. In computer programming, binary numbers are usually used, but if the digits are too large, binary numbers are sometimes grouped into four digits and marked in hexadecimal numbers.</p>"},"replies":[]}]},{"entry":{"title":"envious earwig","msg":"<p><strong>Hexadecimal and Binary Conversions</strong></p>\n<p>Does anyone have any tips and tricks to convert numbers from decimal to hexadecimal and binary? If so, please share them.</p>"},"replies":[{"entry":{"title":"electoral dragon","msg":"<p>Hello Naomi</p>\n<p>To convert numbers from decimal to binary I would use the method that the professor went over in the last lecture. Although the table is a little arduous at first it will always give you the right answer. For smaller numbers after dealing with it a lot I have started to memorize/know some of them or numbers that are close to the desired value which makes it faster to determine the value.&nbsp;</p>\n<p>To convert between hexadecimal and binary I chose to memorize some of the values and that way I can fill in the rest pretty easily. I would recommend memorizing that 0100 = 4 = 4, 1000 = 8 = 8, 1100 = 12 = C, and 1111 = 15 = F. When asked to convert start from the closest value that you have memorized to get the result. So if I was asked to find the binary representation of 10 or A, I recall that 1000 = 8 = 8. Since 10 is 2 greater than 8 the binary representation has to be 1010. If it is one greater than what you have memorized then make the rightmost 0 a 1, if its two greater make the penultimate 0 a 1, if it is three greater make the last two zeros into a 1, and you have memorized every fourth.</p>\n<p>Hope this helps!</p>"},"replies":[]},{"entry":{"title":"driving deer","msg":"<p>Hi Naomi,</p>\n<p>One method I learned from another CS class a while back for converting decimal numbers to binary which is different from what was taught in this class is subtracting powers of 2. For example, if you have 1010 1010<sub>2</sub> as the number in binary, you know that each bit in the number corresponds to a power of 2. The first 1 would correspond to 128, the second 32, the third 8, and the last 4. In decimal form, this number would be 172<sub>10</sub> so now let's work backwards. Each time you want to subtract the largest power of 2 until you reach 0. Make sure you keep track of the powers of 2 that you subtract. 172 - 128 = 44. 44 - 32 = 12. 12 - 8 = 4. 4 - 4 = 0. For each bit that corresponds with the power of 2 that you ended up subtracting, you would make that bit equal to 1. After doing so you should be able to get 1010 1010<sub>2</sub>.</p>\n<p>If you want to convert from decimal to hexadecimal, you will need to use a different method. The reason the one above works is that binary numbers only have two possible values per bit, but a hexadecimal number has 16 possible values for each digit. In addition, calculating powers of 16 is more work, but you can just keep a table of these values when doin the work. One method that I find quite intuitive is similar to the one for binary numbers, but it involves division as well. Let's say you have the number 555<sub>10</sub>. If you divide it by the largest power of 16 that will result in a value that is at least 1, which is 256 in this case, then you would get 2.17. All you care about is the number ahead of the decimal, so 2 goes in the digit that corresponds with 256. Now, you need to subtract 256 x 2 from 555, which gives 43. The next largest power of 16 is 16, so you get 2.69 after the division and all you care about is the 2 in the front. After subtracting, you get 11. At this point, the smallest power is 1, so 11 is the number you care about, which corresponds to a B in hexadecimal. As a result, your final result is 22B<sub>16</sub>.</p>"},"replies":[]},{"entry":{"title":"thin tick","msg":"<p>Hi Naomi,</p>\n<p>This video helped me with decimal to hex: <a href=\"https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/decimal-to-hexadecimal.\\\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/decimal-to-hexadecimal.</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>And I used this one from decimal to binary: <a href=\"https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/decimal-to-binary\" target=\"_blank\" class=\"external\" rel=\"noreferrer noopener\"><span>https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/decimal-to-binary</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a></p>\n<p>&nbsp;</p>"},"replies":[]},{"entry":{"title":"surviving takin","msg":"<p>In my opinion, the best way to do such conversions is to memorize the powers of 2 until the 10th. It's not that tedious of a task and will take you at most a day if done well. This will make you less reliant on \"tricks\" to convert from base ten to base two.&nbsp;</p>\n<p>&nbsp;</p>\n<p>For example a number like <strong>474<sub>10</sub></strong>, I'll immediately identify that <strong>512 </strong>( 2<sup>9</sup> ) is out of the equation so I'll start with <strong>256 </strong>( 2<sup>8</sup> ), <strong>subtract 474 by 256</strong>, and get <strong>218</strong>. I move down a power to <strong>128 </strong>( 2<sup>7</sup> ), conclude its smaller than my number right now, <strong>subtract 218 by 128</strong>, and get&nbsp;<strong>90</strong>. We move down another power to&nbsp;<strong>64&nbsp;</strong>( 2<sup>6</sup> ), same process, <strong>subtract 90 by 64</strong>, and get <strong>26</strong>. Moving down a power now to <strong>32&nbsp;</strong>( 2<sup>5</sup> ), we realize this is larger than our current remaining value, so we move down another power to&nbsp;<strong>16&nbsp;</strong>( 2<sup>4</sup> ), subtract, and we get <strong>10</strong>. Move down to <strong>8&nbsp;</strong>( 2<sup>3</sup> ), subtract, and we're left with <strong>2</strong>. If we're skilled enough, we'll skip the 2nd power of 2 and skip straight to the easiest one of all, which is <strong>2</strong> ( 2<sup>1</sup> ), subtract, and we get 0.</p>\n<p>&nbsp;</p>\n<p>After all this, we take note of the powers of two we had a subtraction for, and note them down from the smallest (&nbsp;2<sup>0 </sup>to the largest which is 2<sup>8</sup>) and since we had no subtractions for the 0th, 2nd, 5th power, we get <strong>1 1101 1010</strong><sub>2</sub>. It will be infinitely easy when you've got your powers of 2 memorized 👍</p>"},"replies":[]}]},{"entry":{"title":"tough toad","msg":"<p>Converting from floating point to hexadecimal</p>\n<p>I'm not sure how to convert from floating point decimal to hexadecimal. For question 2 on hw1, I converted 6.9 into floating point representation but don't know how to convert it to hexadecimal.</p>"},"replies":[{"entry":{"title":"advanced anaconda","msg":"<p>Hi Nikita,</p>\n<p>My understanding is we use Floating Point Representation of 32 bit width to encode the floating point number, and then provide the 32 bit number in hexadecimal.</p>\n<p>Let's take the example from slides: 15213.0</p>\n<p>Which is reprensented as 01000110011011011011010000000000,</p>\n<p>and then convert it to hexadecimal: 466DB400</p>\n<p><img src=\"https://deanza.instructure.com/users/131648/files/5519493/preview?verifier=W9kNz93oA5W3k9rFgBquSvWaNyXBc3ijjdcXwADF\" alt=\"Screenshot 2021-07-03 222331.jpg\" data-api-endpoint=\"https://deanza.instructure.com/api/v1/users/131648/files/5519493\" data-api-returntype=\"File\" style=\"max-width: 475px;\" width=\"475\" height=\"334\">&nbsp;</p>\n<p><img src=\"https://deanza.instructure.com/users/131648/files/5519513/preview?verifier=XMA9d1UUXQBB2ju7D2GxO7rBedFyt1KHGdKOBUaf\" alt=\"Screenshot 2021-07-03 223024.jpg\" data-api-endpoint=\"https://deanza.instructure.com/api/v1/users/131648/files/5519513\" data-api-returntype=\"File\" style=\"max-width: 318px;\">&nbsp;</p>"},"replies":[]}]},{"entry":{"title":"supposed swordtail","msg":"<h2>Reasoning behind using grouping bits into groups of 8</h2>\n<p>Is there any reasoning behind grouping bits into groups of 8? A single hexadecimal digit represents 4 bits so grouping by 4 bits seems more logical in terms of ease of representation. If using more bits is more efficient, why not group by 16 bits, or any other larger number?</p>"},"replies":[{"entry":{"title":"insufficient junglefowl","msg":"<span style=\"  color: #0c0d0e; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; \">The grouping can be changed from 4bit(a nibble) to 8bit(a byte) or 16bit(a word) or 32-bit(a dword). It’s up to the user to decide.&nbsp;</span>"},"replies":[]},{"entry":{"title":"conscious cattle","msg":"<p>Hi Ronak,</p>\n<p>There is nothing special about grouping bits into groups of 8, it was just started that way. Back in the 70s, the idea of working in groups of 8 took over (in the design of integrated circuits especially) and it helped in building the hardware by grouping the wires consistently from one piece to another. You are right about using more bits for being more efficient, but the convention of grouping bits into groups of 8 is much more logical.</p>\n<p>&nbsp;</p>"},"replies":[]},{"entry":{"title":"entitled earwig","msg":"<p>One of the reasons for grouping bits by 8 is also that the 2^8=256 possible values a byte can take is enough to cover all the ascii characters, and having one character take one byte of space is convenient.</p>"},"replies":[]}]},{"entry":{"title":"ugliest trout","msg":"<p><strong><span style=\"font-size: 18pt;\">Binary Addition</span></strong></p>\n<p>From the textbook</p>\n<p>&nbsp;&nbsp; 0 0 0 0 0 1 0 0</p>\n<p>+</p>\n<p>&nbsp;&nbsp; 0 0 0 0 0 1 1 1</p>\n<p>= 0 0 0 0 1 0 1 1</p>\n<p>The part that I do not understand is base on the addition, 1 + 1 = 10, so at position 2, why it is equal to 0?</p>"},"replies":[{"entry":{"title":"consistent centipede","msg":"<p>Hi Jimmy, I believe the 10 carries over, that's why there is a 1 on the 4th from the right. The addition part of it says 0 + 0, but since you carry the 1 over from the 10, then it becomes 1, and the 3rd point from the right is 0.</p>"},"replies":[]},{"entry":{"title":"skilled silkworm","msg":"<p>Hi Jimmy,</p>\n<p>There are 3 basic rules for adding binary numbers. They are:-</p>\n<p>0 + 0 = 0</p>\n<p>0 + 1 = 1</p>\n<p>1 + 1 = 0</p>\n<p>Note that if the sum of two bits is greater than 1, we need to shift a column on the left.</p>\n<p>Suppose, in decimal system, 1 + 1 = 2 and in Binary notation 2 is 10 i.e. 1 * 2 to the power 1 + 0 * 2 to the power 0. That is why we keep 0 in the first column and we shift the carry over 1 to the second column.</p>\n<p>In adding binary numbers, it is the same as adding decimal numbers but the difference is that we can only count to 1 in any of the columns instead of 9 (in binary) before carrying over to the next digit or column.</p>\n<p>I hope this helps.</p>"},"replies":[]},{"entry":{"title":"grumpy haddock","msg":"<p>At position 2, it is equal to 0 because since a 1 at position 2 for each binary above is equal to 8, the addition of both would be 16, which would tick the sum position 3 to 1. As such the addition for 1 + 1 would result in the second position being 0 and the third position being 1.</p>"},"replies":[]},{"entry":{"title":"impressive hummingbird","msg":"<p>Hi Jimmy, for this problem the number is 0 because in binary addition 1 + 1 = 10, you carry the 1 to the next digits added to the left, meaning it will now be 0 + 0 + 1 = 1. This gives you the final answer of 00001011. Hope this helps!</p>"},"replies":[]},{"entry":{"title":"decent condor","msg":"<p>Hi Jimmy</p>\n<p>at position 2, 1 + 1 = 0 is because the binary system only allows either 0 or 1 values, 1+ values (2, 3, 4.....+) are not allowed. In this case, 1+1 = 0 and carries forward.</p>\n<p>So position 3 has 0 + 0, with the carry over, it would then be 1</p>\n<p>&nbsp;</p>"},"replies":[]},{"entry":{"title":"hilarious harrier","msg":"<p>Because you carry the 1 over and leave the 0 behind<br>so&nbsp;</p>\n<p>0 1 0<br>+<br>0 1 1<br>=</p>\n<p>1 0 1<br>the 2 ones in the middle make the\"10\" in the 101</p>"},"replies":[]}]},{"entry":{"title":"civic bovid","msg":"<div class=\"page\" title=\"Page 28\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p><span style=\"font-size: 18pt;\"><strong>Hexadecimal, Binary, and Decimal numbers</strong></span></p>\n<p><span>Anyone know what character do we use as a suffix for hexadecimal numbers? Binary numbers? Decimal numbers?</span></p>\n</div>\n</div>\n</div>\n</div>"},"replies":[{"entry":{"title":"hilarious harrier","msg":"<p>often you use a subscript with the base number on it eg. 10011100₂ would be for binary</p>"},"replies":[]},{"entry":{"title":"close buzzard","msg":"<p>I know that hexadecimal has the prefix \"0x\". Not sure about suffixes.</p>"},"replies":[]}]},{"entry":{"title":"enormous earthworm","msg":"<p><strong>Integer Representations</strong></p>\n<p><img src=\"https://deanza.instructure.com/users/139218/files/5522062/preview?verifier=6V9ChVjSSUP42k8RolqVUwqArUU7pgOJo7MI57Me\" alt=\"unknown.png\" data-api-endpoint=\"https://deanza.instructure.com/api/v1/users/139218/files/5522062\" data-api-returntype=\"File\" style=\"max-width: 524px;\"></p>\n<p>Where does the numbers for uint64_t and int64_t come from?</p>"},"replies":[{"entry":{"title":"faithful firefly","msg":"<p>uint_64_t's max is 2^64 - 1, which makes sense because it is 64 bits (meaning 2^64 possible values) but you have to reserve one number to represent 0 (hence the - 1)</p>\n<p>Its minimum is 0 because it's unsigned, so it can't represent negative numbers</p>\n<p>&nbsp;</p>\n<p>int64_t is signed with two's complement. The minimum for two's complement given the word size w is - 2^(w-1) or -2^63 for w=64</p>\n<p>The maximum for two's complement given the word size w is (2^(w-1) )-1 or 2^63 - 1.</p>"},"replies":[]}]},{"entry":{"title":"geographical gopher","msg":"<p>Two's complement is weird. <a href=\"https://youtu.be/4qH4unVtJkE\" target=\"_blank\" class=\"external youtubed\" rel=\"noreferrer noopener\"><span>https://youtu.be/4qH4unVtJkE</span><span aria-hidden=\"true\" class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"></span><span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a><a href=\"https://youtu.be/4qH4unVtJkE\" class=\"youtubed\">\n        <img src=\"/images/play_overlay.png\" class=\"media_comment_thumbnail\" style=\"background-image: url(//img.youtube.com/vi/4qH4unVtJkE/2.jpg)\" alt=\"\">\n      </a> here is a video from an amazing channel on low level computing concepts if you want it explained another way.</p>\n<p>The one's complement seemed pretty easy, since there is just a negative zero to deal with. Is that used at all or not since all the values are off by one?</p>"},"replies":[]},{"entry":{"title":"professional pigeon","msg":"<p>for Q2, do we use IEEE format or IBM format?</p>"},"replies":[]},{"entry":{"title":"entitled earwig","msg":"<h4><strong>What is Overflow?</strong></h4>\n<p>Can someone explain to me the concept of overflow and when does it happen? Also, what do you do when overflow occurs? Thanks!</p>"},"replies":[]},{"entry":{"title":"moaning mastodon","msg":"<h2>Can we translate any source code like C++ or Java to assembly code?</h2>"},"replies":[]},{"entry":{"title":"agricultural ant","msg":"<h3>Signed Vs Unsigned Numbers in Hexadecimal.</h3>\n<p>&nbsp;</p>\n<p>How can we tell which number is signed and which is unsigned when using the hexadecimal format?</p>"},"replies":[]},{"entry":{"title":"breezy bird","msg":"<p>Boolean Expressions</p>\n<p>After reading chapter 1.4, I still am having trouble understanding, can some explain it to me. I am confused about the multiplexer portion.</p>"},"replies":[]},{"entry":{"title":"relieved quail","msg":"<p>data can be represented using different bases. Data can be used in UNICODE</p>"},"replies":[]},{"entry":{"title":"genuine gopher","msg":"<p>Electronic Implementation</p>\n<p>What does it mean to store with bistable elements?</p>"},"replies":[]}]}