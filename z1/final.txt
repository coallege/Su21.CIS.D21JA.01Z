1.
   ; example string, could be anything
   ; also doesn't have to end with the null byte but optionally can
   .data
      str1 byte "Excellent time too listen to music", 0
   .code
      main:
         mov ah, 'o' ; choose the character you want to remove duplicates of
         xor esi, esi
      top:
         cmp ah, str1[esi]
         jne bottom
      match1:
         cmp ah, str1[esi + 1]
         jne bottom
      move:
         mov edi, esi
      moveloop:
         inc edi
         cmp edi, lengthof str1
         je  bottom
         mov al, str1[edi + 1]
         mov str1[edi], al
         jmp moveloop
      bottom:
         inc esi
         cmp esi, lengthof str1 - 1
         jne top
         jmp $end
      $end:
         ; exit program
         xor eax, eax
         ret

2.
   .data
      ; Both strings must be null terminated for this program to work.
      ; (and they are)
      targetStr byte "Kamran", 20 dup(0)
      sourceStr byte " Eftekhari", 0
   .code
      main:
         mov eax, offset targetStr - 1
         mov ebx, offset sourceStr
      findEndOfTarget:
         inc eax
         cmp byte ptr [eax], 0
         jnz findEndOfTarget
      copyToTarget:
         mov cl, byte ptr [ebx]
         mov byte ptr [eax], cl
         inc eax
         inc ebx
         cmp cl, 0
         jnz copyToTarget
         ; done. exit the program
         xor eax, eax
         ret

3.
   .data
      ; sdword because int!
      a sdword 2
      b sdword 1

   .code
      ; (a<=15 && a>=2) && (b<=2 || b>=14)
      main:
         cmp a, 15
         jg $else  ; a <= 15 inverse a > 15
         cmp a, 2  ; a >= 2  inverse a < 2
         jl $else
         ; to get here, both a<=15 and a>=2 must be true
         cmp b, 2
         jle $then ; b <= 2
         cmp b, 14
         jge $then ; b >= 14
         ; both of b <= 2 and b >= 14 was false
         jmp $else
      $then:
         mov eax, a
         sub eax, 4
         mov b, eax ; b = a - 4
         sub eax, 2
         mov a, eax ; a = b - 2
         jmp done
      $else:
         mov eax, b
         sub eax, 2
         mov a, eax ; a = b - 2
         sub b, 5   ; b = b - 5
         jmp done
      done:
         ; exit the program
         xor eax, eax
         ret

4.
   .data
      ary dword 1,2,3,4,5,6,7,8,9,10,11,12,13,14
      sum dword ? ; sum of every 4th element of ary is stored here

   .code
      main:
         xor eax, eax ; a = 0
         mov esi, 3   ; i = 0
      top:
         cmp esi, lengthof ary
         ja done
         add eax, [ary + esi * 4]
         add esi, 4
         jmp top
      done:
         mov sum, eax
         ; exit the program
         xor eax, eax
         ret
